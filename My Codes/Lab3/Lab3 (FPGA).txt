`timescale 1ns / 1ps

//////////////////////////////////////////////////////////////////////////////////
// Company:
// Engineer:
//
// Create Date: 02/14/2025 09:38:58 AM
// Design Name:
// Module Name: display7
// Project Name:
// Target Devices:
// Tool Versions:
// Description:
//
// Dependencies:
//
// Revision:
// Revision 0.01 - File Created
// Additional Comments:
//
//////////////////////////////////////////////////////////////////////////////////

module display7(
    input logic [3:0] x,
    output logic [6:0] a_b
    );
   
    always_comb begin
        case(x)
            4'b0000: a_b = 7'b0000001;
            4'b0001: a_b = 7'b1001111;
            4'b0010: a_b = 7'b0010010;
            4'b0011: a_b = 7'b0000110;
            4'b0100: a_b = 7'b1001100;
            4'b0101: a_b = 7'b0100100;
            4'b0110: a_b = 7'b0100000;
            4'b0111: a_b = 7'b0001111;
            4'b1000: a_b = 7'b0000000;
            4'b1001: a_b = 7'b0000100;
            4'b1010: a_b = 7'b0001000;
            4'b1011: a_b = 7'b1100000;
            4'b1100: a_b = 7'b0110001;
            4'b1101: a_b = 7'b1000010;
            4'b1110: a_b = 7'b0110000;
            4'b1111: a_b = 7'b0111000;
            default: a_b = 7'b1111111;
        endcase
    end
endmodule

module top_module(
    input logic[3:0] sw,
    output logic [6:0] a_b,
    output logic [7:0] an
);

assign an = 8'b11111110;

display7 d1 (
    .x(sw),
    .a_b(a_b)
);

endmodule









`timescale 1ns / 1ps

//////////////////////////////////////////////////////////////////////////////////
// Company:
// Engineer:
//
// Create Date: 02/14/2025 11:01:40 AM
// Design Name:
// Module Name: fulladder
// Project Name:
// Target Devices:
// Tool Versions:
// Description:
//
// Dependencies:
//
// Revision:
// Revision 0.01 - File Created
// Additional Comments:
//
//////////////////////////////////////////////////////////////////////////////////

module full_adder (
    input logic a, b, cin,
    output logic sum, cout
);

always_comb begin
    sum = a ^ b ^ cin;
    cout = (a & b) | (b & cin) | (cin & a);
end

endmodule

module top_add(
    input logic [3:0] a, b,
    input logic cin,
    output logic [3:0] sum,
    output logic cout
);
    wire c1, c2, c3;

    full_adder f1 (.a(a[0]), .b(b[0]), .cin(cin), .sum(sum[0]), .cout(c1));
    full_adder f2 (.a(a[1]), .b(b[1]), .cin(c1), .sum(sum[1]), .cout(c2));
    full_adder f3 (.a(a[2]), .b(b[2]), .cin(c2), .sum(sum[2]), .cout(c3));
    full_adder f4 (.a(a[3]), .b(b[3]), .cin(c3), .sum(sum[3]), .cout(cout));

endmodule